"use client";
import {
  InputText
} from "./chunk-IUPF7S5X.js";
import "./chunk-OJCWF6MW.js";
import "./chunk-IURPBYAF.js";
import {
  ComponentBase,
  useHandleStyle,
  useMergeProps,
  useUpdateEffect
} from "./chunk-2FHNOCOT.js";
import {
  ObjectUtils,
  PrimeReactContext,
  ariaLabel
} from "./chunk-BOO7B7LD.js";
import {
  __toESM,
  require_react
} from "./chunk-QI53LHDY.js";

// node_modules/primereact/inputotp/inputotp.esm.js
var import_react = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes = {
  root: "p-inputotp p-component",
  input: "p-inputotp-input"
};
var InputOtpBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "InputOtp",
    __parentMetadata: null,
    className: null,
    modelValue: false,
    invalid: false,
    disabled: false,
    readOnly: false,
    variant: null,
    tabIndex: null,
    length: 4,
    mask: false,
    integerOnly: false
  },
  css: {
    classes
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var InputOtp = import_react.default.memo(import_react.default.forwardRef(function(inProps, ref) {
  var _props$value, _props$value$split;
  var elementRef = (0, import_react.useRef)(ref);
  var mergeProps = useMergeProps();
  var context = (0, import_react.useContext)(PrimeReactContext);
  var props = InputOtpBase.getProps(inProps, context);
  var _InputOtpBase$setMeta = InputOtpBase.setMetaData(_objectSpread(_objectSpread({
    props
  }, props.__parentMetadata), {}, {
    context: {
      disabled: props.disabled
    }
  })), ptm = _InputOtpBase$setMeta.ptm, cx = _InputOtpBase$setMeta.cx, isUnstyled = _InputOtpBase$setMeta.isUnstyled;
  useHandleStyle(InputOtpBase.css.styles, isUnstyled, {
    name: "inputotp"
  });
  var defaultValue = props.value ? (_props$value = props.value) === null || _props$value === void 0 || (_props$value = _props$value.toString()) === null || _props$value === void 0 || (_props$value$split = _props$value.split) === null || _props$value$split === void 0 ? void 0 : _props$value$split.call(_props$value, "") : new Array(props.length);
  var _useState = (0, import_react.useState)(defaultValue), _useState2 = _slicedToArray(_useState, 2), tokens = _useState2[0], setTokens = _useState2[1];
  var findNextInput = function findNextInput2(element) {
    var nextInput = element.nextElementSibling;
    if (!nextInput)
      return;
    return nextInput.nodeName === "INPUT" ? nextInput : findNextInput2(nextInput);
  };
  var findPrevInput = function findPrevInput2(element) {
    var prevInput = element.previousElementSibling;
    if (!prevInput)
      return;
    return prevInput.nodeName === "INPUT" ? prevInput : findPrevInput2(prevInput);
  };
  var moveToNextInput = function moveToNextInput2(event) {
    var nextInput = findNextInput(event.target);
    if (nextInput) {
      nextInput.focus();
      nextInput.select();
    }
  };
  var moveToPrevInput = function moveToPrevInput2(event) {
    var prevInput = findPrevInput(event.target);
    if (prevInput) {
      prevInput.focus();
      prevInput.select();
    }
  };
  var onChange = function onChange2(event, value) {
    var _props$onChange;
    props === null || props === void 0 || (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
      originalEvent: event,
      value: value.join("")
    });
  };
  var updateTokens = function updateTokens2(event, index) {
    var inputValue = event.target.value;
    var newTokens = _toConsumableArray(tokens);
    newTokens[index] = inputValue;
    newTokens = newTokens.join("");
    newTokens = newTokens ? newTokens.split("") : new Array(props.length);
    setTokens(newTokens);
    onChange(event, newTokens);
  };
  var _onInput = function onInput(event, index) {
    if (props.disabled || props.readOnly) {
      return;
    }
    if (event.nativeEvent.inputType === "insertFromPaste") {
      return;
    }
    updateTokens(event, index);
    if (event.nativeEvent.inputType === "deleteContentBackward") {
      moveToPrevInput(event);
    } else if (event.nativeEvent.inputType === "insertText" || event.nativeEvent.inputType === "deleteContentForward") {
      moveToNextInput(event);
    }
  };
  var onPaste = function onPaste2(event) {
    if (props.disabled || props.readOnly) {
      return;
    }
    var paste = event.clipboardData.getData("text");
    if (paste.length) {
      var pastedCode = paste.substring(0, props.length + 1);
      if (!props.integerOnly || !isNaN(pastedCode)) {
        var newTokens = pastedCode.split("");
        setTokens(newTokens);
        onChange(event, newTokens);
      }
    }
  };
  var onFocus = function onFocus2(event) {
    var _props$focus;
    event.target.select();
    props === null || props === void 0 || (_props$focus = props.focus) === null || _props$focus === void 0 || _props$focus.call(props, event);
  };
  var onBlur = function onBlur2(event) {
    var _props$blur;
    props === null || props === void 0 || (_props$blur = props.blur) === null || _props$blur === void 0 || _props$blur.call(props, event);
  };
  var onKeydown = function onKeydown2(event) {
    if (props.disabled || props.readOnly) {
      return;
    }
    if (event.altKey || event.ctrlKey || event.metaKey) {
      return;
    }
    switch (event.code) {
      case "ArrowLeft": {
        moveToPrevInput(event);
        event.preventDefault();
        break;
      }
      case "ArrowRight": {
        moveToNextInput(event);
        event.preventDefault();
        break;
      }
      case "Backspace": {
        var _event$target;
        if (((_event$target = event.target) === null || _event$target === void 0 || (_event$target = _event$target.value) === null || _event$target === void 0 ? void 0 : _event$target.length) === 0) {
          moveToPrevInput(event);
          event.preventDefault();
        }
        break;
      }
      case "ArrowUp":
      case "ArrowDown": {
        event.preventDefault();
        break;
      }
      case "Tab":
      case "Enter": {
        break;
      }
      default: {
        if (props !== null && props !== void 0 && props.integerOnly && !(Number(event.key) >= 0 && Number(event.key) <= 9) || tokens.join("").length >= props.length && event.code !== "Delete") {
          event.preventDefault();
        }
        break;
      }
    }
  };
  useUpdateEffect(function() {
    var _props$value2, _props$value2$split;
    var value = props.value ? (_props$value2 = props.value) === null || _props$value2 === void 0 || (_props$value2 = _props$value2.toString()) === null || _props$value2 === void 0 || (_props$value2$split = _props$value2.split) === null || _props$value2$split === void 0 ? void 0 : _props$value2$split.call(_props$value2, "") : new Array(props.length);
    setTokens(value);
  }, [props.value]);
  var createInputElements = function createInputElements2(remainingInputs) {
    if (remainingInputs <= 0) {
      return [];
    }
    var inputElementIndex = props.length - remainingInputs;
    var inputElementEvents = {
      onInput: function onInput(event) {
        return _onInput(event, inputElementIndex);
      },
      onKeyDown: onKeydown,
      onFocus,
      onBlur,
      onPaste
    };
    var inputElementProps = {
      id: inputElementIndex,
      key: inputElementIndex,
      value: tokens[inputElementIndex] || "",
      inputMode: props !== null && props !== void 0 && props.integerOnly ? "numeric" : "text",
      type: props !== null && props !== void 0 && props.mask ? "password" : "text",
      variant: props === null || props === void 0 ? void 0 : props.variant,
      readOnly: props === null || props === void 0 ? void 0 : props.readOnly,
      disabled: props === null || props === void 0 ? void 0 : props.disabled,
      invalid: props === null || props === void 0 ? void 0 : props.invalid,
      tabIndex: props === null || props === void 0 ? void 0 : props.tabIndex,
      unstyled: props === null || props === void 0 ? void 0 : props.unstyled,
      "aria-label": ariaLabel("otpLabel", {
        0: inputElementIndex + 1
      }),
      className: cx("input"),
      pt: ptm("input")
    };
    var inputElement = props !== null && props !== void 0 && props.inputTemplate ? ObjectUtils.getJSXElement(props === null || props === void 0 ? void 0 : props.inputTemplate, {
      events: inputElementEvents,
      props: inputElementProps
    }) : import_react.default.createElement(InputText, _extends({}, inputElementProps, inputElementEvents));
    var inputElements = [inputElement].concat(_toConsumableArray(createInputElements2(remainingInputs - 1)));
    return inputElements;
  };
  var rootElementProps = mergeProps({
    className: cx("root"),
    ref: elementRef,
    style: props === null || props === void 0 ? void 0 : props.style
  }, ptm("root"));
  return import_react.default.createElement("div", rootElementProps, createInputElements(props.length));
}));
InputOtp.displayName = "InputOtp";
export {
  InputOtp
};
//# sourceMappingURL=primereact_inputotp.js.map
